module Java (format) where

import Test
import Control.Monad
import Control.Monad.Trans.Writer

format :: [Test] -> String
format tests = execWriter $ do
    tell "/* DO NOT EDIT THIS FILE\n"
    tell "   It was generated by \"common tests\" - please modify it in the common source and re-generate. */\n"
    tell "\n"
    tell "package sodium;\n\
         \\n\
         \import java.util.ArrayList;\n\
         \import java.util.Arrays;\n\
         \import java.util.List;\n\
         \import java.util.Optional;\n\
         \\n\
         \import junit.framework.TestCase;\n\
         \\n\
         \public class CommonTester extends TestCase {\n"
    forM_ tests $ \(Test group name sts) -> do
        tell $ "\n  public void test_"++group++"_"++name++"() {\n"
        forM_ sts $ \st -> case st of
            Transactional rs [] -> do
                tell $ "    Transaction.runVoid(() -> {\n"
                mapM_ (reactive "      ") rs
                tell $ "    });\n"
            Transactional rs [(t, Var vi, Var vo)] -> do
                tell "    "
                ptype t
                tell " "
                tell vo
                tell " = "
                tell "Transaction.run(() -> {\n"
                mapM_ (reactive "      ") rs
                tell "      return "
                tell vi
                tell ";\n"
                tell "    });\n"
            NewList ty (Var v) -> do
                tell $ "    List<"
                ptype ty
                tell "> "
                tell v
                tell " = new ArrayList();\n"
            AssertEqual vl (Var vr) -> do
                tell "    assertEquals("
                value vl
                tell ","
                tell vr
                tell ");\n"
            Unlisten (Var vr) -> do
                tell "    "
                tell vr
                tell ".unlisten();\n"
        tell "  }\n"
    tell "}\n"

ptype (StreamT t) = tell "Stream<" >> ptype t >> tell ">"
ptype (StreamSinkT t) = tell "StreamSink<" >> ptype t >> tell ">"
ptype StringT = tell "String"
ptype ListenerT = tell "Listener"

reactive indent (NewStream ty (Var vr)) = do
    tell indent
    tell "StreamSink<"
    ptype ty
    tell "> "
    tell vr
    tell " = new StreamSink();\n"
reactive indent (Send (Var vr) vl) = tell (indent++vr++".send(") >> value vl >> tell ");\n" 
reactive indent (Listen (Var v1) (Var v2) (ty, Var v3) hs) = do
    tell indent
    tell "Listener "
    tell v1
    tell " = "
    tell v2
    tell ".listen(("
    ptype ty
    tell " "
    tell v3
    tell ") -> {\n"
    mapM_ handle hs
    tell indent
    tell "});\n"

handle (AppendList (Var vr) vl) = do
    tell "        "
    tell vr
    tell ".add("
    value vl
    tell ");\n"

value (V (Var vr)) = tell vr
value (String s) = tell $ "\"" ++ s ++ "\""
value (List vs) = do
    tell $ "Arrays.asList("
    case vs of
        [] -> return ()
        (a:as) -> do
            value a
            forM_ as $ \a_ -> do
                tell ","
                value a_
    tell ")"


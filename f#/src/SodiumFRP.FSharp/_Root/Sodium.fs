module SodiumFRP.FSharp.Sodium

let isActiveT () = Transaction.isActive ()
let runT f = Transaction.run f
let onStartT a = Transaction.onStart a
let postT a = Transaction.post a

let unlistenL listener = Listener.unlisten listener

let neverS<'a> () = Stream.never<'a> ()
let sinkS<'a> () = StreamSink.create<'a> ()
let sinkWithCoalesceS coalesce = StreamSink.createWithCoalesce coalesce
let sinkCS<'a> () = CellStreamSink.create<'a> ()
let sendS a streamSink = StreamSink.send a streamSink
let loopS f = Stream.loop f
let loopWithNoCapturesS f = Stream.loopWithNoCaptures f
let listenWeakS handler stream = Stream.listenWeak handler stream
let listenS handler stream = Stream.listen handler stream
let attachListenerS listener stream = Stream.attachListener listener stream
let listenOnceS handler stream = Stream.listenOnce handler stream
let listenOnceAsyncS stream = Stream.listenOnceAsync stream
let mapS f stream = Stream.map f stream
let mapToS value stream = Stream.mapTo value stream
let holdS initialValue stream = Stream.hold initialValue stream
let holdLazyS initialValue stream = Stream.holdLazy initialValue stream
let snapshotB behavior f stream = Stream.snapshotB behavior f stream
let snapshotC cell f stream = Stream.snapshot cell f stream
let snapshotAndTakeB behavior stream = Stream.snapshotAndTakeB behavior stream
let snapshotAndTakeC cell stream = Stream.snapshotAndTake cell stream
let snapshot2B behavior1 behavior2 f stream = Stream.snapshot2B behavior1 behavior2 f stream
let snapshot2C cell1 cell2 f stream = Stream.snapshot2 cell1 cell2 f stream
let snapshot3B behavior1 behavior2 behavior3 f stream = Stream.snapshot3B behavior1 behavior2 behavior3 f stream
let snapshot3C cell1 cell2 cell3 f stream = Stream.snapshot3 cell1 cell2 cell3 f stream
let snapshot4B behavior1 behavior2 behavior3 behavior4 f stream = Stream.snapshot4B behavior1 behavior2 behavior3 behavior4 f stream
let snapshot4C cell1 cell2 cell3 cell4 f stream = Stream.snapshot4 cell1 cell2 cell3 cell4 f stream
let snapshot5B behavior1 behavior2 behavior3 behavior4 behavior5 f stream = Stream.snapshot5B behavior1 behavior2 behavior3 behavior4 behavior5 f stream
let snapshot5C cell1 cell2 cell3 cell4 cell5 f stream = Stream.snapshot5 cell1 cell2 cell3 cell4 cell5 f stream
let snapshot6B behavior1 behavior2 behavior3 behavior4 behavior5 behavior6 f stream = Stream.snapshot6B behavior1 behavior2 behavior3 behavior4 behavior5 behavior6 f stream
let snapshot6C cell1 cell2 cell3 cell4 cell5 cell6 f stream = Stream.snapshot6 cell1 cell2 cell3 cell4 cell5 cell6 f stream
let snapshot7B behavior1 behavior2 behavior3 behavior4 behavior5 behavior6 behavior7 f stream = Stream.snapshot7B behavior1 behavior2 behavior3 behavior4 behavior5 behavior6 behavior7 f stream
let snapshot7C cell1 cell2 cell3 cell4 cell5 cell6 cell7 f stream = Stream.snapshot7 cell1 cell2 cell3 cell4 cell5 cell6 cell7 f stream
let snapshot8B behavior1 behavior2 behavior3 behavior4 behavior5 behavior6 behavior7 behavior8 f stream = Stream.snapshot8B behavior1 behavior2 behavior3 behavior4 behavior5 behavior6 behavior7 behavior8 f stream
let snapshot8C cell1 cell2 cell3 cell4 cell5 cell6 cell7 cell8 f stream = Stream.snapshot8 cell1 cell2 cell3 cell4 cell5 cell6 cell7 cell8 f stream
let mergeS f (stream, stream2) = Stream.merge f (stream, stream2)
let orElseS (stream, stream2) = Stream.orElse (stream, stream2)
let filterS predicate stream = Stream.filter predicate stream
let filterOptionS stream = Stream.filterOption stream
let gateB behavior stream = Stream.gateB behavior stream
let gateC cell stream = Stream.gate cell stream
let collectLazyS initialState f stream = Stream.collectLazy initialState f stream
let collectS initialState f stream = Stream.collect initialState f stream
let calmWithCompareS compare stream = Stream.calmWithCompare compare stream
let calmWithEqualityComparerS equalityComparer stream = Stream.calmWithEqualityComparer equalityComparer stream
let calmS stream = Stream.calm stream
let accumLazyS initialState f stream = Stream.accumLazy initialState f stream
let accumS initialState f stream = Stream.accum initialState f stream
let onceS stream = Stream.once stream
let mergeAllS f streams = Stream.mergeAll f streams
let orElseAllS streams = Stream.orElseAll streams

let constantB value = Behavior.constant value
let constantLazyB value = Behavior.constantLazy value
let sinkB initialValue = BehaviorSink.create initialValue
let sinkWithCoalesceB initialValue coalesce = BehaviorSink.createWithCoalesce initialValue coalesce
let sendB a behaviorSink = BehaviorSink.send a behaviorSink
let loopB f = Behavior.loop f
let loopWithNoCapturesB f = Behavior.loopWithNoCaptures f
let sampleB behavior = Behavior.sample behavior
let sampleLazyB behavior = Behavior.sampleLazy behavior
let applyB f behavior = Behavior.apply f behavior
let mapB f behavior = Behavior.map f behavior
let lift2B f (behavior, behavior2) = Behavior.lift2 f (behavior, behavior2)
let lift3B f (behavior, behavior2, behavior3) = Behavior.lift3 f (behavior, behavior2, behavior3)
let lift4B f (behavior, behavior2, behavior3, behavior4) = Behavior.lift4 f (behavior, behavior2, behavior3, behavior4)
let lift5B f (behavior, behavior2, behavior3, behavior4, behavior5) = Behavior.lift5 f (behavior, behavior2, behavior3, behavior4, behavior5)
let lift6B f (behavior, behavior2, behavior3, behavior4, behavior5, behavior6) = Behavior.lift6 f (behavior, behavior2, behavior3, behavior4, behavior5, behavior6)
let lift7B f (behavior, behavior2, behavior3, behavior4, behavior5, behavior6, behavior7) = Behavior.lift7 f (behavior, behavior2, behavior3, behavior4, behavior5, behavior6, behavior7)
let lift8B f (behavior, behavior2, behavior3, behavior4, behavior5, behavior6, behavior7, behavior8) = Behavior.lift8 f (behavior, behavior2, behavior3, behavior4, behavior5, behavior6, behavior7, behavior8)
let liftAllB f behaviors = Behavior.liftAll f behaviors
let switchBB behavior = Behavior.switchB behavior
let switchCB behavior = Behavior.switchC behavior
let switchSB behavior = Behavior.switchS behavior

let constantC value = Cell.constant value
let constantLazyC value = Cell.constantLazy value
let sinkC initialValue = CellSink.create initialValue
let sinkWithCoalesceC initialValue coalesce = CellSink.createWithCoalesce initialValue coalesce
let sendC a cellSink = CellSink.send a cellSink
let loopC f = Cell.loop f
let loopWithNoCapturesC f = Cell.loopWithNoCaptures f
let sampleC cell = Cell.sample cell
let sampleLazyC cell = Cell.sampleLazy cell
let updatesC cell = Cell.updates cell
let valuesC cell = Cell.values cell
let asBehaviorC cell = Cell.asBehavior cell
let listenWeakC handler cell = Cell.listenWeak handler cell
let listenC handler cell = Cell.listen handler cell
let applyC f cell = Cell.apply f cell
let mapC f cell = Cell.map f cell
let lift2C f (cell, cell2) = Cell.lift2 f (cell, cell2)
let lift3C f (cell, cell2, cell3) = Cell.lift3 f (cell, cell2, cell3)
let lift4C f (cell, cell2, cell3, cell4) = Cell.lift4 f (cell, cell2, cell3, cell4)
let lift5C f (cell, cell2, cell3, cell4, cell5) = Cell.lift5 f (cell, cell2, cell3, cell4, cell5)
let lift6C f (cell, cell2, cell3, cell4, cell5, cell6) = Cell.lift6 f (cell, cell2, cell3, cell4, cell5, cell6)
let lift7C f (cell, cell2, cell3, cell4, cell5, cell6, cell7) = Cell.lift7 f (cell, cell2, cell3, cell4, cell5, cell6, cell7)
let lift8C f (cell, cell2, cell3, cell4, cell5, cell6, cell7, cell8) = Cell.lift8 f (cell, cell2, cell3, cell4, cell5, cell6, cell7, cell8)
let calmWithCompareC compare cell = Cell.calmWithCompare compare cell
let calmWithEqualityComparerC equalityComparer cell = Cell.calmWithEqualityComparer equalityComparer cell
let calmC cell = Cell.calm cell
let liftAllC f cells = Cell.liftAll f cells
let switchB cell = Cell.switchB cell
let switchC cell = Cell.switchC cell
let switchS cell = Cell.switchS cell